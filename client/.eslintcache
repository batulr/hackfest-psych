[{"D:\\KTERN.AI\\PRECycle-main\\client\\src\\index.js":"1","D:\\KTERN.AI\\PRECycle-main\\client\\src\\reportWebVitals.js":"2","D:\\KTERN.AI\\PRECycle-main\\client\\src\\App.js":"3","D:\\KTERN.AI\\PRECycle-main\\client\\src\\store.js":"4","D:\\KTERN.AI\\PRECycle-main\\client\\src\\utils\\setAuthToken.js":"5","D:\\KTERN.AI\\PRECycle-main\\client\\src\\actions\\pickup.js":"6","D:\\KTERN.AI\\PRECycle-main\\client\\src\\actions\\auth.js":"7","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Footer\\FooterComponent.js":"8","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Header\\HeaderComponent.js":"9","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Login\\LoginComponent.js":"10","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\AboutUs\\AboutComponent.js":"11","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\layout\\Alert.js":"12","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Home\\HomeComponent.js":"13","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\routing\\PrivateRoute.js":"14","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Signup-rider\\signup-rider.js":"15","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\signup-seller\\SignupSeller.js":"16","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Dashboard_Rider\\rider_dashboard.js":"17","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\RequestPickup\\RequestPickupComponent.js":"18","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Vendor_SignUp\\signup-vendor.js":"19","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\seller-dashboard2\\seller-dashboard2.js":"20","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\RateList\\Rate_List.js":"21","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\seller-dashboard1\\seller-dashboard1.js":"22","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Rider_DeliveryHistory\\delivery_history.js":"23","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\RiderProfile\\RiderProfile.js":"24","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Dashboard_Vendor\\vendor_dashboard.js":"25","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\SellerProfile\\SellerProfile.js":"26","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Faqs\\Faqs.js":"27","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Seller_PickupHistory\\pickup_history.js":"28","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Vendor_OrderHistory\\order_history.js":"29","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\VendorProfile\\VendorProfile.js":"30","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\TnC\\TnC.js":"31","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\ContactUs\\ContactComponent.js":"32","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\SellerProfile\\Card.js":"33","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Testimonials\\Testimonials.js":"34","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Workflow\\Workflow.js":"35","D:\\KTERN.AI\\PRECycle-main\\client\\src\\actions\\alert.js":"36","D:\\KTERN.AI\\PRECycle-main\\client\\src\\actions\\types.js":"37","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\SellerProfile\\EditAddress.js":"38","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\FactsFigures\\FactsFigures.js":"39","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\layout\\Spinner.js":"40","D:\\KTERN.AI\\PRECycle-main\\client\\src\\reducers\\index.js":"41","D:\\KTERN.AI\\PRECycle-main\\client\\src\\reducers\\alert.js":"42","D:\\KTERN.AI\\PRECycle-main\\client\\src\\reducers\\pickup.js":"43","D:\\KTERN.AI\\PRECycle-main\\client\\src\\reducers\\auth.js":"44"},{"size":643,"mtime":1661497726974,"results":"45","hashOfConfig":"46"},{"size":364,"mtime":1661497727075,"results":"47","hashOfConfig":"46"},{"size":5126,"mtime":1661497725988,"results":"48","hashOfConfig":"46"},{"size":383,"mtime":1661497727247,"results":"49","hashOfConfig":"46"},{"size":242,"mtime":1661497734168,"results":"50","hashOfConfig":"46"},{"size":5518,"mtime":1661506156954,"results":"51","hashOfConfig":"46"},{"size":5452,"mtime":1661497727335,"results":"52","hashOfConfig":"46"},{"size":4203,"mtime":1661508949931,"results":"53","hashOfConfig":"46"},{"size":8098,"mtime":1661497729075,"results":"54","hashOfConfig":"46"},{"size":7565,"mtime":1661497729187,"results":"55","hashOfConfig":"46"},{"size":5411,"mtime":1661497728352,"results":"56","hashOfConfig":"46"},{"size":758,"mtime":1661497731910,"results":"57","hashOfConfig":"46"},{"size":6021,"mtime":1661497729138,"results":"58","hashOfConfig":"46"},{"size":631,"mtime":1661497732096,"results":"59","hashOfConfig":"46"},{"size":13080,"mtime":1661497731018,"results":"60","hashOfConfig":"46"},{"size":10047,"mtime":1661497733604,"results":"61","hashOfConfig":"46"},{"size":12471,"mtime":1661497728567,"results":"62","hashOfConfig":"46"},{"size":11266,"mtime":1661507901878,"results":"63","hashOfConfig":"46"},{"size":12732,"mtime":1661497731810,"results":"64","hashOfConfig":"46"},{"size":7229,"mtime":1661509961818,"results":"65","hashOfConfig":"46"},{"size":5244,"mtime":1661497730060,"results":"66","hashOfConfig":"46"},{"size":4886,"mtime":1661509702953,"results":"67","hashOfConfig":"46"},{"size":2744,"mtime":1661497730399,"results":"68","hashOfConfig":"46"},{"size":5625,"mtime":1661497730213,"results":"69","hashOfConfig":"46"},{"size":10698,"mtime":1661497728731,"results":"70","hashOfConfig":"46"},{"size":3685,"mtime":1661497730646,"results":"71","hashOfConfig":"46"},{"size":10107,"mtime":1661497728904,"results":"72","hashOfConfig":"46"},{"size":3678,"mtime":1661497730815,"results":"73","hashOfConfig":"46"},{"size":2853,"mtime":1661497731623,"results":"74","hashOfConfig":"46"},{"size":6222,"mtime":1661497731388,"results":"75","hashOfConfig":"46"},{"size":32076,"mtime":1661497731115,"results":"76","hashOfConfig":"46"},{"size":9953,"mtime":1661497728478,"results":"77","hashOfConfig":"46"},{"size":616,"mtime":1661497730554,"results":"78","hashOfConfig":"46"},{"size":1322,"mtime":1661497731065,"results":"79","hashOfConfig":"46"},{"size":288,"mtime":1661497731858,"results":"80","hashOfConfig":"46"},{"size":366,"mtime":1661497727294,"results":"81","hashOfConfig":"46"},{"size":1792,"mtime":1661497727509,"results":"82","hashOfConfig":"46"},{"size":1394,"mtime":1661497730606,"results":"83","hashOfConfig":"46"},{"size":1525,"mtime":1661497728849,"results":"84","hashOfConfig":"46"},{"size":290,"mtime":1661497731975,"results":"85","hashOfConfig":"46"},{"size":193,"mtime":1661497734080,"results":"86","hashOfConfig":"46"},{"size":378,"mtime":1661497733998,"results":"87","hashOfConfig":"46"},{"size":1476,"mtime":1661497734125,"results":"88","hashOfConfig":"46"},{"size":1670,"mtime":1661497734041,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"1wbg0iw",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"92"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"92"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"92"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"92"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"92"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"92"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"92"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"92"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"92"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"92"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"92"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"92"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"92"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"D:\\KTERN.AI\\PRECycle-main\\client\\src\\index.js",[],["193","194"],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\reportWebVitals.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\App.js",["195"],"import React, { useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./app1.css\";\nimport Header from \"./components/Header/HeaderComponent\";\nimport Footer from \"./components/Footer/FooterComponent\";\nimport Login from \"./components/Login/LoginComponent\";\nimport Contact from \"./components/ContactUs/ContactComponent\";\nimport About from \"./components/AboutUs/AboutComponent\";\nimport Home from \"./components/Home/HomeComponent\";\nimport Alert from \"./components/layout/Alert\";\nimport SignupRider from \"./components/Signup-rider/signup-rider\";\nimport PrivateRoute from \"./components/routing/PrivateRoute\";\nimport Register from \"./components/signup-seller/SignupSeller\";\nimport SignupVendor from \"./components/Vendor_SignUp/signup-vendor\";\nimport SellerDashboard1 from \"./components/seller-dashboard1/seller-dashboard1\";\nimport RiderDashboard from \"./components/Dashboard_Rider/rider_dashboard\";\nimport SellerDashboard2 from \"./components/seller-dashboard2/seller-dashboard2\";\nimport VendorDashboard from \"./components/Dashboard_Vendor/vendor_dashboard\";\nimport RequestPickup from \"./components/RequestPickup/RequestPickupComponent\";\nimport SellerProfile from \"./components/SellerProfile/SellerProfile\";\nimport { RiderProfile } from \"./components/RiderProfile/RiderProfile\";\nimport RateList from \"./components/RateList/Rate_List\";\nimport { OrderHistory } from \"./components/Vendor_OrderHistory/order_history\";\nimport { DeliveryHistory } from \"./components/Rider_DeliveryHistory/delivery_history\";\nimport PickupHistory from \"./components/Seller_PickupHistory/pickup_history\";\nimport Faqs from \"./components/Faqs/Faqs\";\nimport { VendorProfile } from \"./components/VendorProfile/VendorProfile\";\nimport { TnC } from \"./components/TnC/TnC\";\nimport { updateRequest, viewRequest } from \"./actions/pickup\";\n//redux tools\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport { loadUser } from \"./actions/auth\";\nimport setAuthToken from \"./utils/setAuthToken\";\n\nfunction App() {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  useEffect(() => {\n    store.dispatch(loadUser(localStorage.typeofuser));\n    store.dispatch(updateRequest());\n  });\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <div className=\"App\">\n          <Header />\n          <Alert />\n          <Switch>\n            <Route exact path=\"/home\" component={() => <Home />} />\n            <Route exact path=\"/contactus\" component={() => <Contact />} />\n            <Route exact path=\"/aboutus\" component={() => <About />} />\n            <Route exact path=\"/login\" component={() => <Login />} />\n            <Route exact path=\"/signup/seller\" component={() => <Register />} />\n            <Route\n              exact\n              path=\"/signup/rider\"\n              component={() => <SignupRider />}\n            />\n            <Route\n              exact\n              path=\"/signup/vendor\"\n              component={() => <SignupVendor />}\n            />\n            <PrivateRoute\n              exact\n              path=\"/dashboard/seller\"\n              component={() => <SellerDashboard1 />}\n            />\n            <PrivateRoute\n              exact\n              path=\"/sellerDashboardProgress\"\n              component={() => <SellerDashboard2 />}\n            />\n            <PrivateRoute\n              exact\n              path=\"/dashboard/rider\"\n              component={() => <RiderDashboard />}\n            />\n            <PrivateRoute\n              exact\n              path=\"/dashboard/vendor\"\n              component={() => <VendorDashboard />}\n            />\n            <PrivateRoute\n              exact\n              path=\"/history/order\"\n              component={() => <OrderHistory />}\n            />\n            <PrivateRoute\n              exact\n              path=\"/history/delivery\"\n              component={() => <DeliveryHistory />}\n            />\n            <PrivateRoute\n              exact\n              path=\"/history/pickup\"\n              component={() => <PickupHistory />}\n            />\n            <Route exact path=\"/faqs\" component={() => <Faqs />} />\n            <Route exact path=\"/tnc\" component={() => <TnC />} />\n            <PrivateRoute\n              exact\n              path=\"/requestPickup\"\n              component={() => <RequestPickup />}\n            />\n            <PrivateRoute\n              exact\n              path=\"/ratelist\"\n              component={() => <RateList />}\n            />\n\n            <PrivateRoute\n              exact\n              path=\"/profile/rider\"\n              component={() => <RiderProfile />}\n            />\n            <PrivateRoute\n              exact\n              path=\"/profile/seller\"\n              component={() => <SellerProfile />}\n            />\n            <PrivateRoute\n              exact\n              path=\"/profile/vendor\"\n              component={() => <VendorProfile />}\n            />\n            <Redirect to=\"/home\" />\n          </Switch>\n\n          <Footer />\n        </div>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","D:\\KTERN.AI\\PRECycle-main\\client\\src\\store.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\utils\\setAuthToken.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\actions\\pickup.js",["196","197"],"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport {\n  VENDOR_LOADED,\n  WASTELIST_UPDATED,\n  FAIL_WASTELIST_UPDATE,\n  REQUEST_CREATED,\n  REQUEST_FAILED,\n  VENDOR_ORDER_LIST,\n  ACCEPTED_ORDER_LIST,\n  RIDER_NEARBY_ORDER,\n  RIDER_REQUEST_ACCEPTED,\n  VIEW_ACCEPTED_ORDER,\n} from \"./types\";\n\n//Load Vendors\nexport const loadNearbyVendors = (pincode, city) => async (dispatch) => {\n  try {\n    let vendors = await axios.get(`/seller/vendor/${pincode}/${city}`);\n    let activeRequest = await axios.get(`/seller/active/request`);\n    dispatch({\n      type: VENDOR_LOADED,\n      payload: vendors.data,\n    });\n    if (activeRequest.data.length > 0) {\n      dispatch({\n        type: REQUEST_CREATED,\n        payload: activeRequest.data,\n      });\n    }\n    // var length = vendors.data.length;\n    // if (length > 0)\n    //   dispatch(setAlert(`${length} Nearby Vendors Found`, \"success\"));\n  } catch (error) {\n    dispatch({\n      type: VENDOR_LOADED,\n    });\n    // dispatch(setAlert(`We Don't Serve in Your City`, \"success\"));\n    console.log(error.message);\n  }\n};\n\n//Update rate list of vendors\nexport const updateWasteList = (wasteType) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    const data = JSON.stringify({ wasteType });\n    const res = await axios.put(\"/vendor/wastetype\", data, config);\n    dispatch({\n      type: WASTELIST_UPDATED,\n      payload: res.data,\n    });\n    dispatch(setAlert(\"Waste List Updated\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: FAIL_WASTELIST_UPDATE,\n    });\n  }\n};\n\n//Create A pickup reequest\nexport const createRequest = (formData) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    const data = JSON.stringify(formData);\n    const res = await axios.post(\"/seller/request\", data, config);\n    dispatch({\n      type: REQUEST_CREATED,\n      payload: res.data,\n    });\n    dispatch(vendorOrderList());\n    dispatch(setAlert(\"Request Created Successfully!\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: REQUEST_FAILED,\n    });\n  }\n};\n\n//Update the order status\nexport const updateRequest = () => async (dispatch) => {\n  try {\n    let activeRequest = await axios.get(`/seller/active/request`);\n    if (activeRequest.data.length > 0) {\n      dispatch({\n        type: REQUEST_CREATED,\n        payload: activeRequest.data,\n      });\n    }\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: REQUEST_FAILED,\n    });\n  }\n};\n\n//Show the pending request to the vendor dashboard\nexport const vendorOrderList = () => async (dispatch) => {\n  try {\n    let orderList = await axios.get(\"/vendor/request\");\n    var pendingOrder = [];\n    orderList.data.map((order) => {\n      if (order.vendorAccepted === false) pendingOrder.push(order);\n    });\n    var acceptedOrder = [];\n    orderList.data.map((order) => {\n      if (order.vendorAccepted === true) acceptedOrder.push(order);\n    });\n    dispatch({\n      type: VENDOR_ORDER_LIST,\n      payload: pendingOrder,\n    });\n    dispatch({\n      type: ACCEPTED_ORDER_LIST,\n      payload: acceptedOrder,\n    });\n  } catch (err) {\n    dispatch({\n      type: REQUEST_FAILED,\n    });\n  }\n};\n\n//Accept or Decline the order by the vendor\nexport const acceptOrder = (orderid) => async (dispatch) => {\n  try {\n    await axios.put(`/vendor/request/accept/${orderid}`);\n    dispatch(setAlert(\"Order Accepted!\", \"success\"));\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: REQUEST_FAILED,\n    });\n  }\n};\n\n//Get all the vendor accepted request in rider of that area\nexport const viewRequest = () => async (dispatch) => {\n  try {\n    const response = await axios.get(\"/rider/request\");\n    dispatch({\n      type: RIDER_NEARBY_ORDER,\n      payload: response.data,\n    });\n  } catch (error) {\n    const errors = error.response.data.errors;\n    if (errors) {\n      errors.forEach((err) => dispatch(setAlert(err.msg, \"danger\")));\n    }\n    console.log(error.message);\n    dispatch({\n      type: REQUEST_FAILED,\n    });\n  }\n};\n\n//Rider Accept request\nexport const acceptRequest = (orderid) => async (dispatch) => {\n  try {\n    const res = await axios.put(`/rider/request/accept/${orderid}`);\n    dispatch({\n      type: RIDER_REQUEST_ACCEPTED,\n      payload: res.data,\n    });\n    dispatch(viewRequest());\n  } catch (error) {\n    const errors = error.response.data.errors;\n    if (errors) {\n      errors.forEach((err) => dispatch(setAlert(err.msg, \"danger\")));\n    }\n    dispatch({\n      type: REQUEST_FAILED,\n    });\n  }\n};\n\n//To view all the accepted order by the rider\nexport const viewAcceptedRequestRider = () => async (dispatch) => {\n  try {\n    const res = await axios.get(\"/rider/request/accept\");\n    dispatch({\n      type: VIEW_ACCEPTED_ORDER,\n      payload: res.data,\n    });\n  } catch (error) {\n    const errors = error.response.data.errors;\n    if (errors) {\n      errors.forEach((err) => dispatch(setAlert(err.msg, \"danger\")));\n    }\n    dispatch({\n      type: REQUEST_FAILED,\n    });\n  }\n};\n","D:\\KTERN.AI\\PRECycle-main\\client\\src\\actions\\auth.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Footer\\FooterComponent.js",["198","199"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FaStar } from \"react-icons/fa\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst StarRating = () => {\n  const [rating, setRating] = useState(null);\n  const [hover, setHover] = useState(null);\n\n  return (\n    <div>\n      <h5>Rate Us:</h5>\n      {[...Array(5)].map((star, i) => {\n        const ratingValue = i + 1;\n        return (\n          <label>\n            <input\n              type=\"radio\"\n              name=\"starrating\"\n              value={ratingValue}\n              onClick={() => setRating(ratingValue)}\n            />\n            <FaStar\n              className=\"star\"\n              color={ratingValue <= (hover || rating) ? \"#ffa62b\" : \"#bbbfca\"}\n              onMouseEnter={() => setHover(ratingValue)}\n              onMouseLeave={() => setHover(null)}\n              size={30}\n            />\n          </label>\n        );\n      })}\n    </div>\n  );\n};\n\nfunction Footer(props) {\n  return (\n    <div className=\"footer\">\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-4 offset-1 col-sm-2\">\n            <h5>Services</h5>\n            <ul className=\"list-unstyled\">\n              {localStorage.typeofuser === \"seller\" ? (\n                <li>\n                  <Link to=\"/requestPickup\">Request Pickup</Link>\n                </li>\n              ) : (\n                \"\"\n              )}\n              {!localStorage.token ? (\n                <div>\n                  <li>\n                    <Link to=\"/signup/vendor\">Join as Vendor</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/signup/rider\">Join as Rider</Link>\n                  </li>\n                </div>\n              ) : (\n                \"\"\n              )}\n              <li>\n                <Link to=\"/contactus\">Contact Us</Link>\n              </li>\n            </ul>\n          </div>\n          <div className=\"col-7 col-sm-3\">\n            <h5>Community</h5>\n            <ul className=\"list-unstyled\">\n              <li>\n                <Link to=\"/faqs\">How it works & FAQs</Link>\n              </li>\n              <li>\n                <Link to=\"/aboutus\">About Us</Link>\n              </li>\n              <li>\n                <Link to=\"/tnc\">TnC & Privacy Policy</Link>\n              </li>\n            </ul>\n          </div>\n          <div className=\"col-12 col-sm-3\">\n            <center>\n              <StarRating />\n            </center>\n          </div>\n          <div className=\"col-12 col-sm-3 align-self-center\">\n            <div className=\"text-center\">\n              <h5>Find us at:</h5>\n              <a\n                className=\"btn btn-social-icon btn-google\"\n                href=\"http://google.com/+\"\n              >\n                <i className=\"fa fa-google-plus\"></i>\n              </a>{\" \"}\n              <a\n                className=\"btn btn-social-icon btn-facebook\"\n                href=\"http://www.facebook.com/profile.php?id=\"\n              >\n                <i className=\"fa fa-facebook\"></i>\n              </a>{\" \"}\n              <a\n                className=\"btn btn-social-icon btn-linkedin\"\n                href=\"http://www.linkedin.com/in/\"\n              >\n                <i className=\"fa fa-linkedin\"></i>\n              </a>{\" \"}\n              <a\n                className=\"btn btn-social-icon btn-twitter\"\n                href=\"http://twitter.com/\"\n              >\n                <i className=\"fa fa-twitter\"></i>\n              </a>{\" \"}\n              <a\n                className=\"btn btn-social-icon btn-google\"\n                href=\"http://youtube.com/\"\n              >\n                <i className=\"fa fa-youtube\"></i>\n              </a>{\" \"}\n              <a className=\"btn btn-social-icon\" href=\"mailto:\">\n                <i className=\"fa fa-envelope-o\"></i>\n              </a>{\" \"}\n            </div>\n          </div>\n        </div>\n        <hr />\n        <div className=\"row justify-content-center\">\n          <div className=\"col-auto\">\n            <p>© Copyright 2022</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Header\\HeaderComponent.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Login\\LoginComponent.js",["200","201","202"],"import React, { useState, useEffect } from \"react\";\nimport { login } from \"../../actions/auth\";\nimport { setAlert } from \"../../actions/alert\";\nimport styles from \"./logIn.module.css\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport GoogleLogin from \"react-google-login\";\n\nconst Login = ({ login, isAuthenticated, setAlert }) => {\n  const [formData, setFormData] = useState({\n    loginDetail: \"\",\n    password: \"\",\n    typeOfUser: \"\",\n  });\n  const { loginDetail, password, typeOfUser } = formData;\n\n  //google login response\n  const responseGoogle = (response) => {\n    console.log(response);\n    setFormData({\n      ...formData,\n      loginDetail: response.profileObj.email,\n      password: response.profileObj.googleId,\n    });\n  };\n\n  useEffect(() => {\n    login(loginDetail, password, typeOfUser);\n  }, [password]);\n\n  localStorage.setItem(\"typeofuser\", typeOfUser);\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    login(loginDetail, password, typeOfUser);\n  };\n\n  //redirect if logged in\n  if (isAuthenticated) {\n    const url = `/dashboard/${localStorage.getItem(\"typeofuser\")}`;\n    return <Redirect to={url} />;\n  }\n\n  return (\n    <div className=\"signup-Rider\">\n      {/* GOOGLE FONTS */}\n\n      {/* MAIN CONTENT SECTION */}\n\n      <div className=\"flex-container-rider\">\n        {/* WELCOME TO PRECYCLE SECTION */}\n\n        <div className={styles.SignIN}>\n          {/* <div className=\"welcome\"> */}\n\n          <h2 className={styles.welcomeText}> Welcome to</h2>\n\n          <h1 className={styles.name}>PRECycle</h1>\n          {/* </div> */}\n        </div>\n\n        {/* SIGNIN SECTION */}\n\n        <div className={styles.flexRight}>\n          <div className=\"content\">\n            <h2 className={styles.form_h2}>\n              <center>SIGN IN</center>\n            </h2>\n\n            <form\n              onSubmit={(e) => onSubmit(e)}\n              className={styles.form_component}\n            >\n              <input\n                type=\"text\"\n                id=\"loginDetail\"\n                name=\"loginDetail\"\n                placeholder=\"Email / Phone Number\"\n                onChange={(e) => onChange(e)}\n                value={loginDetail}\n                required\n              ></input>\n\n              <input\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                onChange={(e) => onChange(e)}\n                value={password}\n                required\n              ></input>\n              <select\n                name=\"typeOfUser\"\n                value={typeOfUser}\n                className={styles.select}\n                onChange={(e) => onChange(e)}\n              >\n                <option>*Select Type of User!</option>\n                <option value=\"seller\">Seller</option>\n                <option value=\"rider\">Rider</option>\n                <option value=\"vendor\">Vendor</option>\n              </select>\n\n              <button className={styles.signin_btn}>Sign In</button>\n            </form>\n            <center>\n              <p className={styles.or}>or</p>\n              <GoogleLogin\n                clientId=\"266262352024-950s3j5a29gddj75l9oujmckk8u7rfub.apps.googleusercontent.com\"\n                buttonText=\"Login\"\n                onSuccess={responseGoogle}\n                onFailure={responseGoogle}\n                cookiePolicy={\"single_host_origin\"}\n              />\n              ,\n              <h4 className={styles.form_h4}>\n                {\" \"}\n                New User?{\" \"}\n                <Link to=\"/signup/seller\" className={styles.form_link}>\n                  {\" \"}\n                  Sign Up Here\n                </Link>\n              </h4>\n            </center>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nLogin.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.object.isRequired,\n  setAlert: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { login })(Login);\n\n/*import React, { useState } from \"react\";\nimport { login } from \"../../actions/auth\";\nimport styles from \"./logIn.module.css\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\n\nconst Login = ({ login, isAuthenticated }) => {\n  const [formData, setFormData] = useState({\n    loginDetail: \"\",\n    password: \"\",\n    typeOfUser: \"seller\",\n  });\n\n  const { loginDetail, password, typeOfUser } = formData;\n  localStorage.setItem(\"typeofuser\", typeOfUser);\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    login(loginDetail, password, typeOfUser);\n  };\n\n  //redirect if logged in\n  if (isAuthenticated) {\n    const url = `/dashboard/${localStorage.getItem(\"typeofuser\")}`;\n    return <Redirect to={url} />;\n  }\n  return (\n    <div className=\"loginRounded\">\n      <div className={styles.parent_div}>\n        <div className={styles.button_div}>\n          <image src=\"./assets/signin.jpg\" alt=\"signin\"/>\n          \n        </div>\n\n        <div className={styles.form_div}>\n          <div className={styles.form_div_inner}>\n            <h2 className={styles.form_h2}>SIGN IN</h2>\n\n            <form\n              onSubmit={(e) => onSubmit(e)}\n              className={styles.form_component}\n            >\n              <input\n                type=\"text\"\n                name=\"loginDetail\"\n                placeholder=\"Email / Phone Number\"\n                onChange={(e) => onChange(e)}\n                value={loginDetail}\n                required\n              ></input>\n\n              <input\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                onChange={(e) => onChange(e)}\n                value={password}\n                required\n              ></input>\n              <select\n                name=\"typeOfUser\"\n                value={typeOfUser}\n                onChange={(e) => onChange(e)}\n              >\n                <option value=\"seller\">Seller</option>\n                <option value=\"rider\">Rider</option>\n                <option value=\"vendor\">Vendor</option>\n              </select>\n\n              <button className={styles.signin_btn}>Sign In</button>\n            </form>\n            <p className={styles.or}>or</p>\n            <GoogleLogin\n              clientId=\"266262352024-950s3j5a29gddj75l9oujmckk8u7rfub.apps.googleusercontent.com\"\n              buttonText=\"Login\"\n              onSuccess={responseGoogle}\n              onFailure={responseGoogle}\n              cookiePolicy={'single_host_origin'}\n            />,\n            <h4 className={styles.form_h4}>\n              {\" \"}\n              New User?{\" \"}\n              <Link to=\"/signup/seller\" className={styles.form_link}>\n                {\" \"}\n                Sign Up Here\n              </Link>\n            </h4>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nLogin.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { login })(Login);\n*/\n","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\AboutUs\\AboutComponent.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\layout\\Alert.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Home\\HomeComponent.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\routing\\PrivateRoute.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Signup-rider\\signup-rider.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\signup-seller\\SignupSeller.js",["203"],"import React, { useState } from \"react\";\nimport \"./signup-seller.css\";\nimport { AiFillGoogleCircle } from \"react-icons/ai\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setAlert } from \"../../actions/alert\";\nimport { registerSeller } from \"../../actions/auth\";\nimport PropTypes from \"prop-types\";\nimport GoogleLogin from \"react-google-login\";\n\nconst Register = ({ setAlert, registerSeller, isAuthenticated }) => {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    password2: \"\",\n    phone: \"\",\n    pincode: \"\",\n    firstline: \"\",\n    landmark: \"\",\n  });\n\n  const {\n    name,\n    email,\n    password,\n    password2,\n    phone,\n    pincode,\n    firstline,\n    landmark,\n    avatar,\n  } = formData;\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (password !== password2) {\n      setAlert(\"Password do not match\", \"danger\");\n    } else {\n      registerSeller(\n        name,\n        email,\n        password,\n        phone,\n        pincode,\n        firstline,\n        landmark,\n        avatar\n      );\n    }\n  };\n  //google login response\n  const responseGoogle = (response) => {\n    console.log(response);\n    setFormData({\n      ...formData,\n      name: response.profileObj.name,\n      email: response.profileObj.email,\n      avatar: response.profileObj.imageUrl,\n      password: response.profileObj.googleId,\n      password2: response.profileObj.googleId,\n    });\n    setAlert(\"Please enter your contact details!\", \"success\");\n  };\n  const onChange = async (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const [disabled, setDisabled] = useState(true);\n\n  function activate() {\n    setDisabled(!disabled);\n  }\n\n  //redirect after successfull signup\n  if (isAuthenticated) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n  function Req() {\n    return <span className=\"req\">*</span>;\n  }\n\n  return (\n    <div className=\"signup-seller\">\n      {/* GOOGLE FONTS */}\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@900&family=Roboto&display=swap\"\n        rel=\"stylesheet\"\n      />\n      {/* BOOTSTRAP */}\n      <link\n        href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css\"\n        rel=\"stylesheet\"\n        integrity=\"sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1\"\n        crossorigin=\"anonymous\"\n      ></link>\n      <div class=\"flex-container-signupSeller\">\n        <div class=\"flex-item-left-seller\">\n          {/* <div className=\"welcome\"> */}\n          <h2 className=\"welcome-text-seller\"> Welcome to</h2>\n          <h1 className=\"name-seller\">PRECycle</h1>\n          {/* </div> */}\n        </div>\n\n        {/* SIGNUP SECTION */}\n\n        <div class=\"flex-item-right-signupSeller\">\n          <div className=\"content\">\n            <div className=\"signup-with\">\n              <h2 className=\"\">\n                <strong>Sign up with</strong>\n              </h2>\n              <div className=\"buttonsignupSeller\">\n                <GoogleLogin\n                  clientId=\"266262352024-950s3j5a29gddj75l9oujmckk8u7rfub.apps.googleusercontent.com\"\n                  buttonText=\"Sign Up\"\n                  onSuccess={responseGoogle}\n                  onFailure={responseGoogle}\n                  cookiePolicy={\"single_host_origin\"}\n                />\n              </div>\n            </div>\n            {/* OR DIV */}\n            <hr className=\"division\" />\n\n            {/* SIGNUP HERE DIV */}\n\n            <div className=\"signup-here\">\n              <h3>\n                <strong>Signup here</strong>\n              </h3>\n              <p>\n                Fields marked with <Req /> represents the required fields.\n              </p>\n              <form onSubmit={(e) => onSubmit(e)}>\n                <div class=\"form-floating mb-3 \">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"name\"\n                    placeholder=\"Name\"\n                    name=\"name\"\n                    value={name}\n                    onChange={(e) => onChange(e)}\n                  />\n                  <label for=\"name\">\n                    Name\n                    <Req />\n                  </label>\n                </div>\n                <div class=\"form-floating mb-3\">\n                  <input\n                    type=\"email\"\n                    class=\"form-control\"\n                    id=\"email\"\n                    placeholder=\"name@example.com\"\n                    name=\"email\"\n                    value={email}\n                    onChange={(e) => onChange(e)}\n                    required\n                  />\n                  <label for=\"email\">\n                    Email address\n                    <Req />\n                  </label>\n                </div>\n                <div class=\"form-floating mb-3\">\n                  <input\n                    type=\"password\"\n                    class=\"form-control pass\"\n                    id=\"password\"\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    value={password}\n                    onChange={(e) => onChange(e)}\n                    required\n                  />\n                  <label for=\"password\">\n                    Confirm\n                    <Req />\n                  </label>\n                </div>\n                <div class=\"form-floating mb-3\">\n                  <input\n                    type=\"password\"\n                    class=\"form-control pass\"\n                    id=\"Password2\"\n                    placeholder=\"Confirm Password\"\n                    name=\"password2\"\n                    value={password2}\n                    onChange={(e) => onChange(e)}\n                    required\n                  />\n                  <label for=\"password2\">\n                    Confirm Password\n                    <Req />\n                  </label>\n                </div>\n                <div class=\"form-floating mb-3\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"Contact\"\n                    placeholder=\"Phone no.\"\n                    name=\"phone\"\n                    value={phone}\n                    onChange={(e) => onChange(e)}\n                  />\n                  <label for=\"Contact\">Phone No.</label>\n                </div>\n                <div class=\"form-floating mb-3\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"firstline\"\n                    placeholder=\"First Line\"\n                    name=\"firstline\"\n                    value={firstline}\n                    onChange={(e) => onChange(e)}\n                  />\n                  <label for=\"firstline\">\n                    Address\n                    <Req />\n                  </label>\n                </div>\n                <div class=\"form-floating mb-3\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"secondline\"\n                    placeholder=\"Second Line\"\n                  />\n                  <label for=\"secondline\">Additional Address here</label>\n                </div>\n                <div class=\"form-floating mb-3\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"pincode\"\n                    placeholder=\"Pincode\"\n                    name=\"pincode\"\n                    value={pincode}\n                    onChange={(e) => onChange(e)}\n                  />\n                  <label for=\"pincode\">\n                    Pincode\n                    <Req />\n                  </label>\n                </div>\n                <div class=\"form-floating mb-3\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"landmark\"\n                    placeholder=\"landmark\"\n                    name=\"landmark\"\n                    value={landmark}\n                    onChange={(e) => onChange(e)}\n                  />\n                  <label for=\"landmark\">landmark</label>\n                </div>\n                {/* <button onClick={() => getArea(pincode)}>Get Area List</button>\n                  <div class=\"form-floating mb-3\">\n                           <select id=\"cityList\" name=\"city\" value={city} onChange={(e) => onChange(e)}>\n                            {postOffices.map(postOffice => {\n                              <option value={postOffice.City}>{postOffice.Name}</option>\n                            })}\n                          </select>\n                          <label for=\"cityList\">Name Of Area</label>\n                  </div> */}\n                <div className=\"tnc\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"TnC\"\n                    required\n                    onChange={activate}\n                  />\n                  <label for=\"TnC\">\n                    {\" \"}\n                    I agree to the{\" \"}\n                    <a href=\"/tnc\" alt=\"terms and conditions\" className=\"tnc\">\n                      terms and conditions and the privacy policy\n                    </a>\n                  </label>\n                </div>\n                <input\n                  type=\"submit\"\n                  className=\"btn btn-warning btn-lg\"\n                  value=\"Register\"\n                  disabled={disabled}\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  registerSeller: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { setAlert, registerSeller })(Register);\n","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Dashboard_Rider\\rider_dashboard.js",["204","205","206","207"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport RDstyles from \"./rider_dashboard.module.css\";\nimport profile from \"./rider.png\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Form from \"react-bootstrap/Form\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { setAlert } from \"../../actions/alert\";\nimport Moment from \"react-moment\";\nimport {\n  acceptOrder,\n  viewRequest,\n  acceptRequest,\n  viewAcceptedRequestRider,\n} from \"../../actions/pickup\";\n\nconst RiderDashboard = ({\n  auth,\n  user,\n  request,\n  acceptedRequest,\n  viewRequest,\n  acceptRequest,\n  viewAcceptedRequestRider,\n}) => {\n  useEffect(() => {\n    viewRequest();\n    viewAcceptedRequestRider();\n  }, [auth.isAuthenticated]);\n  function AllottedCard(props) {\n    return (\n      <Card classname={RDstyles.card_pickups}>\n        <Card.Body className={RDstyles.card_a}>\n          <Card.Text>\n            <Table>\n              <tbody>\n                <tr>\n                  <td>ORDER NO.</td>\n                  <td>{props.OrderNo}</td>\n                </tr>\n                <tr>\n                  <td>SELLER'S NAME</td>\n                  <td>{props.SellerName}</td>\n                </tr>\n                <tr>\n                  <td>SELLER'S ADDRESS </td>\n                  <td>{props.SellerAddress}</td>\n                </tr>\n                <tr>\n                  <td>VENDOR'S NAME</td>\n                  <td>{props.VendorName}</td>\n                </tr>\n                <tr>\n                  <td>SLOT</td>\n                  <td>{props.Slot}</td>\n                </tr>\n                <tr>\n                  <td>WASTE TYPE</td>\n                  <td>{props.WasteType}</td>\n                </tr>\n                <tr>\n                  <td>WASTE QUANTITY</td>\n                  <td>{props.WasteQuantity}</td>\n                </tr>\n              </tbody>\n            </Table>\n          </Card.Text>\n          <div>\n            <hr></hr>\n          </div>\n          <Update\n            onMyWay={props.onMyWay}\n            wasteCollected={props.wasteCollected}\n            paidTheSeller={props.paidTheSeller}\n            droppedAtVendors={props.droppedAtVendors}\n          />\n          <Invoice />\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  function PendingCard(props) {\n    return (\n      <Card classname={RDstyles.card_pickups}>\n        <Card.Body className={RDstyles.card_p}>\n          <Card.Text>\n            <Table>\n              <tbody>\n                <tr>\n                  <td>ORDER NO.</td>\n                  <td>{props.OrderNo}</td>\n                </tr>\n                <tr>\n                  <td>SELLER'S NAME</td>\n                  <td>{props.SellerName}</td>\n                </tr>\n                <tr>\n                  <td>SELLER'S ADDRESS </td>\n                  <td>{props.SellerAddress}</td>\n                </tr>\n                <tr>\n                  <td>VENDOR'S NAME</td>\n                  <td>{props.VendorName}</td>\n                </tr>\n                <tr>\n                  <td>SLOT</td>\n                  <td>{props.Slot}</td>\n                </tr>\n                <tr>\n                  <td>WASTE TYPE</td>\n                  <td>{props.WasteType}</td>\n                </tr>\n                <tr>\n                  <td>WASTE QUANTITY</td>\n                  <td>{props.WasteQuantity}</td>\n                </tr>\n              </tbody>\n            </Table>\n          </Card.Text>\n          <div>\n            <hr></hr>\n          </div>\n          <Button\n            variant=\"success\"\n            onClick={() => {\n              acceptRequest(props.OrderNo);\n              window.location.reload();\n            }}\n            className={RDstyles.rider_accept}\n          >\n            ACCEPT\n          </Button>\n          <Button variant=\"danger\" className={RDstyles.rider_decline}>\n            DECLINE\n          </Button>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  function Update(props) {\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n      <>\n        <Button\n          variant=\"warning\"\n          className={RDstyles.rider_update_button}\n          onClick={handleShow}\n        >\n          UPDATE\n        </Button>\n\n        <Modal show={show} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>STATUS UPDATE</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <form method=\"post\" classname={RDstyles.statusupdate}>\n              <fieldset>\n                <legend>What is the status?</legend>\n                <input\n                  type=\"checkbox\"\n                  name=\"status_update\"\n                  value=\"\"\n                  checked={props.onMyWay}\n                  disabled={props.onMyWay ? \"true\" : false}\n                />\n                On my Way\n                <br />\n                <input\n                  type=\"checkbox\"\n                  name=\"status_update\"\n                  value=\"\"\n                  checked={props.wasteCollected}\n                  disabled={props.wasteCollected ? \"true\" : false}\n                />\n                Waste collected\n                <br />\n                <input\n                  type=\"checkbox\"\n                  name=\"status_update\"\n                  value=\"\"\n                  checked={props.paidTheSeller}\n                  disabled={props.paidTheSeller ? \"true\" : false}\n                />\n                Paid the seller\n                <br />\n                <input\n                  type=\"checkbox\"\n                  name=\"status_update\"\n                  value=\"\"\n                  checked={props.droppedAtVendors}\n                  disabled={props.droppedAtVendors ? \"true\" : false}\n                />\n                Dropped at vendor's\n                <br />\n              </fieldset>\n            </form>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={handleClose}>\n              Save Changes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n  function Invoice() {\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n      <>\n        <Button\n          variant=\"light\"\n          className={RDstyles.rider_invoice_button}\n          onClick={handleShow}\n        >\n          GENERATE INVOICE\n        </Button>\n\n        <Modal show={show} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>ENTER DETAILS</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form>\n              <Form.Group>\n                <Form.Label>Waste Type</Form.Label>\n                <Form.Control\n                  type=\"WasteType\"\n                  placeholder=\"Enter the types of waste collected\"\n                ></Form.Control>\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label>Waste Quantity</Form.Label>\n                <Form.Control\n                  type=\"WasteQuantity\"\n                  placeholder=\"Enter the respective waste quantity with appropriate units\"\n                />\n              </Form.Group>\n              <Form.Group controlId=\"formBasicCheckbox\">\n                <Form.Check\n                  type=\"checkbox\"\n                  label=\"The seller approves of the above mentioned details\"\n                />\n              </Form.Group>\n            </Form>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" type=\"submit\" onClick={handleClose}>\n              Save Changes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n  return (\n    <div className={RDstyles.rider_dashboard}>\n      <div className={RDstyles.greet_rider}>\n        {\" \"}\n        <Link to=\"/profile/rider\">\n          {/* GRADIENT BAR */}\n          <div className=\"rider-image\">\n            <img\n              src={profile}\n              alt=\"profile_img\"\n              className={RDstyles.rider_img}\n            ></img>{\" \"}\n            {/* RIDER IMAGE */}\n          </div>\n          <div className={RDstyles.rider_greeting_text}>\n            <h2>{user ? user.name : \"<please refresh the page>\"}</h2>{\" \"}\n            {/* GREET RIDER */}\n          </div>\n        </Link>\n      </div>\n\n      <div className=\"card-groups\">\n        {\" \"}\n        {/* CONTAINS ALLOTTED AND PENDING CARDS*/}\n        <div class=\"row\">\n          <div class=\"col-12 col-lg-6\">\n            <div>\n              <div className={RDstyles.rider_board_heading}>\n                <h1>ALLOTTED ORDERS</h1>\n              </div>\n\n              {acceptedRequest.length > 0 ? (\n                acceptedRequest.map((req) => {\n                  return (\n                    <AllottedCard\n                      OrderNo={req._id}\n                      SellerName={req.seller.name}\n                      SellerAddress={\n                        req.address.firstLine +\n                        \",\" +\n                        req.address.city +\n                        \",\" +\n                        req.address.state +\n                        req.address.pin\n                      }\n                      VendorName={req.vendorDetail.name}\n                      Slot={<Moment>{req.timeOfPickup}</Moment>}\n                      WasteType={req.orderList.map(\n                        (waste) => waste.nameOfWaste\n                      )}\n                      WasteQuantity={\n                        req.orderList.map((waste) => waste.qty) + \" Kg\"\n                      }\n                      onMyWay={req.onMyWay.status}\n                      wasteCollected={req.wasteCollected.status}\n                      paidTheSeller={req.paidTheSeller.status}\n                      droppedAtVendors={req.droppedAtVendors.status}\n                    />\n                  );\n                })\n              ) : (\n                <h1>No Pending Request!</h1>\n              )}\n            </div>\n          </div>\n\n          <div class=\"col-12 col-lg-6\">\n            <div className=\"pending\">\n              <div className={RDstyles.rider_board_heading}>\n                <h1>PICKUP REQUESTS</h1>\n              </div>\n              {request.length > 0 ? (\n                request.map((req) => {\n                  return (\n                    <PendingCard\n                      OrderNo={req._id}\n                      SellerName={req.seller.name}\n                      SellerAddress={\n                        req.address.firstLine +\n                        \",\" +\n                        req.address.city +\n                        \",\" +\n                        req.address.state +\n                        req.address.pin\n                      }\n                      VendorName={req.vendorDetail.name}\n                      Slot={<Moment>{req.timeOfPickup}</Moment>}\n                      WasteType={req.orderList.map(\n                        (waste) => waste.nameOfWaste\n                      )}\n                      WasteQuantity={\n                        req.orderList.map((waste) => waste.qty) + \" Kg\"\n                      }\n                    />\n                  );\n                })\n              ) : (\n                <h1>No Pending Request!</h1>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className={RDstyles.delivery_hist_button}>\n        <Link to=\"/history/delivery\">\n          <Button variant=\"info\">DELIVERY HISTORY</Button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nRiderDashboard.propTypes = {\n  user: PropTypes.object.isRequired,\n  request: PropTypes.object.isRequired,\n  pickup: PropTypes.object.isRequired,\n  acceptOrder: PropTypes.func.isRequired,\n  alert: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n  acceptRequest: PropTypes.func.isRequired,\n  viewAcceptedRequestRider: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.auth.user,\n  request: state.pickup.request,\n  acceptedRequest: state.pickup.acceptedRequest,\n  pickup: state.pickup,\n  alert: state.alert,\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, {\n  viewRequest,\n  acceptRequest,\n  viewAcceptedRequestRider,\n})(RiderDashboard);\n","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\RequestPickup\\RequestPickupComponent.js",["208","209","210","211"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Form, FormGroup, Label, Input, Button, Col } from \"reactstrap\";\nimport Select from \"react-select\";\nimport { Redirect } from \"react-router-dom\";\nimport { FcBusinessman } from \"react-icons/fc\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { loadNearbyVendors, vendorOrderList } from \"../../actions/pickup\";\nimport Spinner from \"../layout/Spinner\";\nimport { createRequest } from \"../../actions/pickup\";\nimport { loadUser } from \"../../actions/auth\";\n\nconst RequestPickup = ({\n  user,\n  loadNearbyVendors,\n  vendors,\n  createRequest,\n  pickupRequest,\n}) => {\n  const [formData, setFormData] = useState({});\n  //Updating vendors when there is a change in vendors\n  useEffect(() => {\n    setFormData({\n      ...formData,\n      wasteType:\n        vendors !== undefined && vendors[0] !== undefined\n          ? vendors[0].wasteType\n          : [],\n      vendorid:\n        vendors !== undefined && vendors[0] !== undefined ? vendors[0]._id : \"\",\n    });\n  }, [vendors]);\n\n  //updating the form data with user details which are required for creating the orders\n  useEffect(() => {\n    setFormData({\n      city: user ? user.address.city : \"\",\n      pincode: user ? user.address.pin : \"\",\n      state: user ? user.address.state : \"\",\n      firstLine: user ? user.address.firstLine : \"\",\n      landmark: user ? user.address.landmark : \"\",\n      orderList: [],\n      dateOfPickup: \"\",\n      timeOfPickup: \"\",\n      recent: true,\n    });\n  }, [user]);\n\n  //Destructuring the FormData\n  var {\n    city,\n    pincode,\n    state,\n    firstLine,\n    landmark,\n    wasteType,\n    orderList,\n    dateOfPickup,\n    timeOfPickup,\n    recent,\n  } = formData;\n\n  //Creating the list of the waste type selected by the user of the vendor\n  var options = [\n    { value: \"NewsPaper\", label: \"NewsPaper\" },\n    { value: \"Plastic\", label: \"Plastic\" },\n    { value: \"E-waste\", label: \"E-waste\" },\n  ];\n  // useEffect(() => {\n  //   wasteType !== undefined\n  //     ? wasteType.map((waste) => {\n  //         var data = { value: waste.name, label: waste.name };\n  //         options.push(data);\n  //         return 1;\n  //       })\n  //     : options.push({ value: \"NewsPaper\", label: \"NewsPaper\" });\n  // }, [wasteType, orderList]);\n\n  const [selectedOption, setState] = useState({\n    selectedOption: null,\n    qty: \"\",\n  });\n\n  const { qty } = selectedOption;\n\n  const handleChange = (selectedOption) => {\n    setState({ selectedOption });\n  };\n\n  const handleQtyChange = (e) => {\n    setState({ ...selectedOption, [e.target.name]: e.target.value });\n  };\n\n  const onAdd = (e) => {\n    e.preventDefault();\n    const dataToPush = {\n      nameOfWaste: selectedOption.selectedOption.value,\n      qty,\n    };\n    if (dataToPush.selectedOption === \"\" || dataToPush.qty === \"\")\n      return alert(\"Please fill the form\");\n    orderList.push(dataToPush);\n    setState({ selectedOption: null, qty: \"\" });\n  };\n\n  const onChange = async (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n  useEffect(() => {\n    loadNearbyVendors(pincode, city);\n  }, [pincode, city, loadNearbyVendors]);\n\n  const [toDateDisabled, toggleDisabled] = useState(recent);\n\n  const request = (e) => {\n    e.preventDefault();\n    createRequest(formData);\n    window.location.reload();\n  };\n\n  if (pickupRequest.length > 0) {\n    return <Redirect to=\"/sellerDashboardProgress\" />;\n  }\n\n  function Vendors(props) {\n    return (\n      <div className=\"vendor-list\">\n        <label class=\"container404\">\n          {props.vendor}\n          <input type=\"radio\" checked=\"checked\" name=\"radio\" />\n          <span class=\"checkmark\"></span>\n        </label>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"seller-dashboard3\">\n        {/* HEADER SECTION */}\n        <div className=\"gradient-section1\">\n          <Link to=\"/profile/seller\">\n            <div className=\"Profile-image-container\">\n              <div className=\"intro\">\n                <h5>\n                  Hi!{\" \"}\n                  {user ? (\n                    <span>{user.name}</span>\n                  ) : (\n                    <span>User Not Loaded Please Refresh The Page!</span>\n                  )}\n                </h5>\n              </div>\n              {/* PROFILE IMAGE OF SELLER */}\n              <div className=\"profile-image\">\n                <FcBusinessman className=\"seller-profile-pic\" />\n              </div>\n            </div>\n          </Link>\n        </div>\n        {/* REQUEST TO PICKUP SECTION */}\n        <br />\n        <h1>\n          <center>Request a Pickup</center>\n        </h1>{\" \"}\n        <hr className=\"division1\" />\n        <div className=\"container\">\n          <Form>\n            <FormGroup>\n              <Label row htmlFor=\"address\">\n                <h3>\n                  Address<span className=\"btn btn-large fa fa-edit\"></span>\n                </h3>\n              </Label>\n              <Input\n                type=\"textarea\"\n                id=\"address\"\n                name=\"firstLine\"\n                rows=\"8\"\n                placeholder={firstLine}\n                onChange={(e) => onChange(e)}\n              />\n              <Input\n                type=\"text\"\n                id=\"landmark\"\n                name=\"landmark\"\n                placeholder={landmark}\n                onChange={(e) => {\n                  loadNearbyVendors(pincode, city);\n                  onChange(e);\n                }}\n              />\n              <Input\n                type=\"text\"\n                id=\"city\"\n                name=\"city\"\n                placeholder={city + \" \" + state}\n                disabled={true}\n                onChange={(e) => {\n                  loadNearbyVendors(pincode, city);\n                  onChange(e);\n                }}\n              />\n              <Input\n                type=\"text\"\n                id=\"pincode\"\n                name=\"pincode\"\n                placeholder={pincode}\n                disabled={true}\n                onChange={(e) => {\n                  onChange(e);\n                }}\n              />\n\n              <hr />\n              <h3>Select Vendor</h3>\n              <br />\n              {/* DISPLAY THE VENDORS NEAR THE LOCATION */}\n              {vendors ? (\n                vendors.length > 0 ? (\n                  vendors.map((ven, index) => (\n                    <Vendors vendor={ven.name} index={index} />\n                  ))\n                ) : (\n                  <Spinner />\n                )\n              ) : (\n                \"\"\n              )}\n            </FormGroup>\n            <hr />\n            <h3>Enter Waste Details</h3>\n            <br />\n            <FormGroup row>\n              <Label htmlFor=\"wasteType\" md={2}>\n                Type of waste\n              </Label>\n              <Col md={{ size: 3 }}>\n                <Select\n                  options={options}\n                  name=\"wasteType\"\n                  value={selectedOption}\n                  className=\"basic-single\"\n                  classNamePrefix=\"select\"\n                  onChange={handleChange}\n                />\n              </Col>\n              <Label htmlFor=\"wasteType\" md={{ size: 3, offset: 1 }}>\n                Waste Quantity (Kg or piece)\n              </Label>\n              <Col md={{ size: 1 }}>\n                <Input\n                  type=\"number\"\n                  id=\"quantity\"\n                  name=\"qty\"\n                  placeholder=\"Waste Quantity\"\n                  value={qty}\n                  onChange={(e) => handleQtyChange(e)}\n                />\n              </Col>\n              <Col md={2}>\n                <Button outline color=\"warning\" onClick={(e) => onAdd(e)}>\n                  Add\n                </Button>\n              </Col>\n            </FormGroup>\n            <div className=\"table-responsive\">\n              <table class=\"table table-striped table-dark\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Waste Type</th>\n                    <th scope=\"col\">Quantity</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {orderList !== undefined ? (\n                    orderList.map((waste, index) => {\n                      return (\n                        <tr>\n                          <th scope=\"row\">{index + 1}</th>\n                          <td>{waste.nameOfWaste}</td>\n                          <td>{waste.qty}</td>\n                        </tr>\n                      );\n                    })\n                  ) : (\n                    <span></span>\n                  )}\n                </tbody>\n              </table>\n            </div>\n            <hr />\n            <h3>Select Slot</h3>\n            <br />\n            {/* Checkbox for recent request selection */}\n            <p>\n              <input\n                type=\"checkbox\"\n                name=\"current\"\n                checked={recent}\n                value={recent}\n                onChange={(e) => {\n                  setFormData({ ...formData, recent: !recent });\n                  toggleDisabled(!toDateDisabled);\n                }}\n              />{\" \"}\n              Create A Recent Request\n            </p>\n            {toDateDisabled ? (\n              <div>\n                <FormGroup row>\n                  <Label htmlFor=\"date\" md={2}>\n                    Date of Pickup\n                  </Label>\n                  <Col md={3}>\n                    <input\n                      type=\"date\"\n                      id=\"date\"\n                      name=\"dateOfPickup\"\n                      placeholder=\"ENTER PICKUP DATE\"\n                      value={dateOfPickup}\n                      onChange={(e) => onChange(e)}\n                    />\n                  </Col>\n                  <Label htmlFor=\"time\" md={{ size: 2, offset: 1 }}>\n                    Pickup Time\n                  </Label>\n                  <Col md={3}>\n                    <input\n                      type=\"date\"\n                      id=\"time\"\n                      name=\"timeOfPickup\"\n                      placeholder=\"ENTER PICKUP TIME\"\n                      value={timeOfPickup}\n                      onChange={(e) => onChange(e)}\n                    />\n                  </Col>\n                </FormGroup>\n                <br />\n                <FormGroup>\n                  <br />\n                </FormGroup>\n              </div>\n            ) : (\n              <span></span>\n            )}\n            <center>\n              <Button type=\"submit\" color=\"warning\" onClick={(e) => request(e)}>\n                Submit Request\n              </Button>\n            </center>\n          </Form>\n        </div>\n      </div>\n    </div>\n  );\n};\nRequestPickup.propTypes = {\n  user: PropTypes.object.isRequired,\n  loadNearbyVendors: PropTypes.func.isRequired,\n  createRequest: PropTypes.func.isRequired,\n  pickupRequest: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.auth.user,\n  vendors: state.pickup.vendors,\n  pickupRequest: state.pickup.request,\n});\n\nexport default connect(mapStateToProps, { loadNearbyVendors, createRequest })(\n  RequestPickup\n);\n","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Vendor_SignUp\\signup-vendor.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\seller-dashboard2\\seller-dashboard2.js",["212","213","214","215"],"import React, { useEffect } from \"react\";\nimport \"./seller-dashboard2.css\";\nimport Button from \"react-bootstrap/Button\";\nimport { FcBusinessman } from \"react-icons/fc\";\nimport { FcOk } from \"react-icons/fc\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Moment from \"react-moment\";\n\nconst SellerDashboard2 = ({ user, requests, pickup }) => {\n  var address = \"\";\n  var waste = \"\";\n  var vendorDetail = \"\";\n  var timeOfPickup = \"\";\n  var qty = \"\";\n  var vendorAccepted = \"\";\n  var orderAccepted = \"\";\n  var onMyWay = \"\";\n  var riderName = \"rider not alloted\";\n  var wasteCollected = \"\";\n  var paidTheSeller = \"\";\n  var droppedAtVendors = \"\";\n  var cancelled = \"\";\n\n  if (requests) {\n    vendorDetail =\n      requests[0] !== undefined ? requests[0].vendorDetail.name : \"\";\n    requests.map((request) => {\n      if (!request.cancelled && !request.completed) {\n        if (request !== undefined) {\n          if (request.address.firstLine !== undefined)\n            address += request.address.firstLine;\n          address += \", \";\n          if (request.address.city !== undefined)\n            address += request.address.city;\n          address += \", \";\n          if (request.address.state !== undefined)\n            address += request.address.state;\n          address += \", P.O: \";\n          if (request.address.pin !== undefined) address += request.address.pin;\n          address += \" \";\n          if (request.timeOfPickup !== undefined)\n            timeOfPickup = request.timeOfPickup;\n          if (request.orderList !== undefined)\n            waste = request.orderList.map((waste) => {\n              return waste.nameOfWaste;\n            });\n          if (request.orderList !== undefined)\n            qty = request.orderList.map((waste) => {\n              return waste.qty + \"Kg\";\n            });\n          if (request.vendorAccepted !== undefined)\n            vendorAccepted = request.vendorAccepted;\n          if (request.orderAccepted !== undefined)\n            orderAccepted = request.orderAccepted.status;\n          if (request.cancelled !== undefined) cancelled = request.cancelled;\n          if (request.onMyWay !== undefined) onMyWay = request.onMyWay.status;\n          if (request.droppedAtVendors !== undefined)\n            droppedAtVendors = request.droppedAtVendors.status;\n          if (request.wasteCollected !== undefined)\n            wasteCollected = request.wasteCollected.status;\n          if (request.paidTheSeller !== undefined)\n            paidTheSeller = request.paidTheSeller.status;\n          if (request.riderDetail !== undefined)\n            riderName = request.riderDetail.name;\n        }\n      }\n    });\n\n    //traverse complete request array and find if any order of the user is not completed or nor cancelled.\n    requests.map((request) => {\n      if (request.cancelled || request.completed)\n        return <Redirect to=\"/requestPickup\" />;\n    });\n  }\n  if (requests.length === 0) return <Redirect to=\"/requestPickup\" />;\n\n  function KeyValue(props) {\n    return (\n      <div className=\"keyvalue-container\">\n        <div className=\"key-container\">\n          <p>{props.info} : </p>\n        </div>\n        <div className=\"value-container\">\n          <p>{props.value}</p>\n        </div>\n      </div>\n    );\n  }\n\n  function StatusUpdates(props) {\n    return (\n      <div className=\"status-updates\">\n        <FcOk className=\"tick-icon\" />\n        <p>{props.status}</p>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <div className=\"seller-dashboard1\">\n        {/* HEADER SECTION */}\n        <div className=\"gradient-section\">\n          <Link to=\"/profile/seller\">\n            <div className=\"Profile-image-container\">\n              <div className=\"intro\">\n                <h5>Hi! {user ? user.name : \"User Not Loaded\"}</h5>\n              </div>\n              {/* PROFILE IMAGE OF SELLER */}\n              <div className=\"profile-image\">\n                <FcBusinessman className=\"seller-profile-pic\" />\n              </div>\n            </div>\n          </Link>\n        </div>\n        {/* CURRENT REQUEST SECTION */}\n        <div className=\"Current-request \">\n          <h2 className=\"current-text\">Current Request</h2>\n\n          {/* INFORMATION DISPLAYED TO SELLER */}\n\n          {/* VENDOR'S NAME */}\n\n          <KeyValue info=\"Vendor's Name\" value={vendorDetail} />\n\n          {/* PICKUP ADDRESS       */}\n\n          <KeyValue info=\"pickup address\" value={address} />\n\n          {/* SLOT */}\n          <KeyValue\n            info=\"Slot Details \"\n            value={<Moment>{timeOfPickup}</Moment>}\n          ></KeyValue>\n\n          {/* RIDER'S NAME */}\n\n          <KeyValue info=\"Rider's Name\" value={riderName} />\n\n          {/* WASTE TYPE */}\n\n          <KeyValue info=\"Waste Type\" value={waste} />\n\n          {/* WASTE QUANTITY */}\n\n          <KeyValue info=\"Waste Quantity\" value={qty} />\n        </div>\n        <hr className=\"division1\" />\n        {/* STATUS UPDATES SECTION */}\n        {vendorAccepted ? (\n          <div className=\"status-container\">\n            <h3 className=\"current-text\"> Status Updates</h3>\n            <div className=\"status-container-flex\">\n              <div className=\"status-container-flex-box\">\n                {vendorAccepted ? (\n                  <StatusUpdates status=\"Approved by vendor\" />\n                ) : (\n                  \"\"\n                )}\n\n                {orderAccepted ? (\n                  <StatusUpdates status=\"Approved by rider\" />\n                ) : (\n                  \"\"\n                )}\n                {onMyWay ? <StatusUpdates status=\"Rider on way\" /> : \"\"}\n              </div>\n              <div className=\"status-container-flex-box\">\n                {wasteCollected ? (\n                  <StatusUpdates status=\"Waste collected\" />\n                ) : (\n                  \"\"\n                )}\n                {paidTheSeller ? (\n                  <StatusUpdates status=\"Recieved Payment\" />\n                ) : (\n                  \"\"\n                )}\n                {droppedAtVendors ? (\n                  <StatusUpdates status=\"Dropped at vendor\" />\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </div>\n            <hr className=\"division1\" />\n          </div>\n        ) : (\n          \"\"\n        )}\n\n        {/* PICKUP HISTORY SECTION */}\n        <Link to=\"/history/pickup\">\n          <Button variant=\"primary\" className=\"pickup-button\">\n            <span className=\"request-text\">Pickup History</span>\n          </Button>{\" \"}\n        </Link>\n        <Link to=\"/cancel\">\n          <Button variant=\"danger\" className=\"pickup-button\">\n            <span className=\"request-text\">Cancel The Pickup Request!</span>\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nSellerDashboard2.propTypes = {\n  user: PropTypes.object.isRequired,\n  vendor: PropTypes.object.isRequired,\n  requests: PropTypes.array.isRequired,\n  pickup: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.auth.user,\n  vendor: state.pickup.vendors,\n  requests: state.pickup.request,\n  pickup: state.pickup,\n});\n\nexport default connect(mapStateToProps, {})(SellerDashboard2);\n","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\RateList\\Rate_List.js",["216"],"import React, { useState, useEffect } from \"react\";\nimport RLstyles from \"./Rate_List.module.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport vendor_ic from \"../Dashboard_Vendor/vendor.jpg\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { updateWasteList } from \"../../actions/pickup\";\nimport { loadUser } from \"../../actions/auth\";\n\nconst RateList = ({ auth, pickup, updateWasteList }) => {\n  const [modal, toggleModal] = useState(\"false\");\n  function WasteRate(props) {\n    return (\n      <tr>\n        <td>{props.waste}</td>\n        <td className={RLstyles.rate_column}>{`Rs ${props.rate}/-`}</td>\n        <td>\n          <button\n            id={props.index}\n            onClick={(e) => {\n              toggleModal(!modal);\n              setData({\n                name: props.waste,\n                rate: props.rate,\n                index: props.index,\n              });\n            }}\n          >\n            <span>&#9998;</span>\n          </button>\n        </td>\n      </tr>\n    );\n  }\n\n  useEffect(() => {\n    loadUser(localStorage.typeofuser);\n  });\n\n  var wasteTypeArray = auth.user\n    ? auth.user.wasteType\n    : [{ name: \"check\", rate: \"2000000000\" }];\n  var [formData, setFormData] = useState(wasteTypeArray);\n  useEffect(() => {\n    setFormData(wasteTypeArray);\n  }, [auth.user]);\n  const [data, setData] = useState({\n    index: -1,\n    name: \"\",\n    rate: \"\",\n  });\n\n  const { index, name, rate } = data;\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const dataToPush = {\n      name,\n      rate,\n    };\n    if (dataToPush.name === \"\" || dataToPush.rate === \"\")\n      return alert(\"Please fill the form\");\n    setFormData([...formData, dataToPush]);\n    console.log([...formData, dataToPush]);\n    setData({ name: \"\", rate: \"\" });\n    toggleModal(!modal);\n    updateWasteList([...formData, dataToPush]);\n  };\n\n  const onChange = (e) => setData({ ...data, [e.target.name]: e.target.value });\n  const updateList = (e) => {\n    e.preventDefault();\n    formData.map((data) => {\n      if (data.name === name) {\n        data.rate = rate;\n      }\n      return 1;\n    });\n    toggleModal(!modal);\n    updateWasteList(formData);\n  };\n\n  return (\n    <div className={RLstyles.out_container}>\n      <div>\n        <div className={RLstyles.greet_vendor}>\n          {/* GRADIENT BAR */}\n          <div className=\"vendor-image\">\n            <img\n              src={vendor_ic}\n              alt=\"profile_img\"\n              className={RLstyles.vendor_img}\n            ></img>\n            {/* VENDOR IMAGE */}\n          </div>\n          <div className={RLstyles.vendor_greeting_text}>\n            <h2>Welcome, {auth.user ? auth.user.name : \"\"}</h2>\n            {/* GREET VENDOR */}\n          </div>\n        </div>\n\n        <div className={RLstyles.vendor_rate_list}>\n          <div className={RLstyles.list_heading}>\n            <h2>RATE LIST</h2>\n          </div>\n\n          <div className={RLstyles.bgeffect}>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>WASTE ITEM</th>\n                  <th>RATE</th>\n                  <th>Edit</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {formData.map((waste, index) => {\n                  return (\n                    <WasteRate\n                      waste={waste.name}\n                      rate={waste.rate}\n                      index={index}\n                    />\n                  );\n                })}\n              </tbody>\n            </Table>\n\n            {!modal ? (\n              <form className=\"rate_form\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Waste Type\"\n                  name=\"name\"\n                  value={name}\n                  onChange={(e) => onChange(e)}\n                  required={true}\n                ></input>\n                <input\n                  type=\"text\"\n                  placeholder=\"Rate\"\n                  name=\"rate\"\n                  value={rate}\n                  onChange={(e) => onChange(e)}\n                  required={true}\n                ></input>\n                {index < formData.length ? (\n                  <button onClick={(e) => updateList(e)}>Update</button>\n                ) : (\n                  <button onClick={(e) => onSubmit(e)}>Add</button>\n                )}\n              </form>\n            ) : (\n              \"\"\n            )}\n          </div>\n\n          <div className={RLstyles.update_rate}>\n            <Button\n              variant=\"primary\"\n              onClick={(e) => {\n                toggleModal(!modal);\n                setData({ name: \"\", rate: \"\" });\n              }}\n            >\n              Add New Item\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nRateList.propTypes = {\n  auth: PropTypes.object.isRequired,\n  vendor: PropTypes.object.isRequired,\n  updateWasteList: PropTypes.func.isRequired,\n  pickup: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  vendor: state.pickup.vendor,\n  pickup: state.pickup,\n});\n\nexport default connect(mapStateToProps, { updateWasteList })(RateList);\n","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\seller-dashboard1\\seller-dashboard1.js",["217"],"import React, { useEffect } from \"react\";\nimport \"./seller-dashboard1.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { FcBusinessman } from \"react-icons/fc\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../layout/Spinner\";\nimport { loadNearbyVendors } from \"../../actions/pickup\";\n\nconst SellerDashboard1 = ({\n  user,\n  auth,\n  vendor,\n  loadNearbyVendors,\n  request,\n}) => {\n  useEffect(() => {\n    loadNearbyVendors(localStorage.pincode, localStorage.city);\n  }, [user]);\n  function Vendors(props) {\n    return (\n      <div className=\"vendor-list\">\n        <label class=\"container404\">\n          {props.vendor}\n          <input type=\"radio\" checked=\"checked\" name=\"radio\" />\n          <span class=\"checkmark\"></span>\n        </label>\n      </div>\n    );\n  }\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    loadNearbyVendors(localStorage.pincode, localStorage.city);\n  };\n\n  return (\n    <div>\n      <div className=\"seller-dashboard1\">\n        {/* HEADER SECTION */}\n        <div className=\"gradient-section\">\n          <Link to=\"/profile/seller\">\n            <div className=\"Profile-image-container\">\n              <div className=\"intro\">\n                <h5>\n                  Hi! {user ? <span>{user.name}</span> : <span>Default</span>}{\" \"}\n                </h5>\n              </div>\n              {/* PROFILE IMAGE OF SELLER */}\n              <div className=\"profile-image\">\n                <FcBusinessman className=\"seller-profile-pic\" />\n              </div>\n            </div>\n          </Link>\n        </div>\n\n        {/* REQUEST TO PICKUP SECTION */}\n        <div>\n          <Link to=\"/requestPickup\">\n            <Button variant=\"warning\" className=\"request-to-pickup\">\n              <span className=\"request-text\">Request To Pickup</span>\n            </Button>\n          </Link>\n          <hr className=\"division1\" />\n          {/* SEARCH FOR VENDORS NEAR YOU SECTION */}\n          <h4 className=\"search-inst\">Search for vendors near you</h4>\n          <Form>\n            <div className=\"form-container\">\n              {/* ADDRESS INPUT */}\n\n              <div className=\"address-input\">\n                <Form.Group controlId=\"loaction\">\n                  <Form.Label></Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter pickup address\"\n                    className=\"address-class\"\n                  />\n                </Form.Group>\n              </div>\n\n              {/* PINCODE INPUT */}\n              <div className=\"pincode-input\">\n                <Form.Group controlId=\"city\">\n                  <Form.Label></Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"City\"\n                    value={localStorage.city}\n                  />\n                </Form.Group>\n              </div>\n              <div className=\"pincode-input\">\n                <Form.Group controlId=\"pincode\">\n                  <Form.Label></Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Pin Code\"\n                    value={localStorage.pincode}\n                  />\n                </Form.Group>\n              </div>\n            </div>\n            <div>\n              <center>\n                {\" \"}\n                <input\n                  type=\"submit\"\n                  value=\"Find Nearby Vendors\"\n                  onClick={(e) => onSubmit(e)}\n                ></input>\n              </center>\n              <br />\n            </div>\n          </Form>\n          {/* DISPLAY THE VENDORS NEAR THE LOCATION */}\n          {vendor ? (\n            vendor.length > 0 ? (\n              vendor.map((ven, index) => (\n                <Vendors vendor={ven.name} index={index} />\n              ))\n            ) : (\n              <Spinner />\n            )\n          ) : (\n            \"No Vendor Found. Please Try Again after Some Time!\"\n          )}\n          <hr className=\"division1\" />\n          {/* PICKUP HISTORY SECTION */}\n          <Link to=\"/history/pickup\">\n            <Button variant=\"primary\" className=\"pickup-button\">\n              <span className=\"request-text\">Pickup History</span>\n            </Button>{\" \"}\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nSellerDashboard1.propTypes = {\n  user: PropTypes.object.isRequired,\n  vendor: PropTypes.object.isRequired,\n  loadNearbyVendors: PropTypes.func.isRequired,\n  request: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.auth.user,\n  vendor: state.pickup.vendors,\n  request: state.pickup.request,\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { loadNearbyVendors })(\n  SellerDashboard1\n);\n","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Rider_DeliveryHistory\\delivery_history.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\RiderProfile\\RiderProfile.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Dashboard_Vendor\\vendor_dashboard.js",["218","219","220"],"import React, { useState, useEffect, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport VDstyles from \"./vendor_dashboard.module.css\";\nimport vendorpic from \"./vendor.jpg\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { FcOk } from \"react-icons/fc\";\nimport { vendorOrderList, acceptOrder } from \"../../actions/pickup\";\nimport Moment from \"react-moment\";\n\nconst VendorDashboard = ({\n  user,\n  vendorOrderList,\n  pickup: { request, acceptedRequest },\n  acceptOrder,\n  alert,\n}) => {\n  useEffect(() => {\n    vendorOrderList();\n  }, [alert]);\n  function UpcomingCard(props) {\n    return (\n      <Card classname={VDstyles.card_orders}>\n        <Card.Body className={VDstyles.card_u}>\n          <Card.Text>\n            <Table>\n              <tbody>\n                <tr>\n                  <td>ORDER NO.</td>\n                  <td>{props.OrderNo}</td>\n                </tr>\n                <tr>\n                  <td>SELLER'S NAME</td>\n                  <td>{props.SellerName}</td>\n                </tr>\n                <tr>\n                  <td>RIDER'S NAME</td>\n                  <td>{props.RiderName}</td>\n                </tr>\n                <tr>\n                  <td>SLOT</td>\n                  <td>{props.Slot}</td>\n                </tr>\n                <tr>\n                  <td>WASTE TYPE</td>\n                  <td>{props.WasteType}</td>\n                </tr>\n                <tr>\n                  <td>WASTE QUANTITY</td>\n                  <td>{props.WasteQuantity}</td>\n                </tr>\n              </tbody>\n            </Table>\n          </Card.Text>\n          <div>\n            <hr></hr>\n          </div>\n          <Button variant=\"success\" className={VDstyles.vendor_accept}>\n            ACCEPT\n          </Button>\n          <Button variant=\"danger\" className={VDstyles.vendor_decline}>\n            DECLINE\n          </Button>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  function AcceptedCard(props) {\n    return (\n      <Card classname={VDstyles.card_pickups}>\n        <Card.Body className={VDstyles.card_ac}>\n          <Card.Text>\n            <Table>\n              <tbody>\n                <tr>\n                  <td>ORDER NO.</td>\n                  <td>{props.OrderNo}</td>\n                </tr>\n                <tr>\n                  <td>SELLER'S NAME</td>\n                  <td>{props.SellerName}</td>\n                </tr>\n                <tr>\n                  <td>RIDER'S NAME</td>\n                  <td>{props.RiderName}</td>\n                </tr>\n                <tr>\n                  <td>SLOT</td>\n                  <td>{props.Slot}</td>\n                </tr>\n                <tr>\n                  <td>WASTE TYPE</td>\n                  <td>{props.WasteType}</td>\n                </tr>\n                <tr>\n                  <td>WASTE QUANTITY</td>\n                  <td>{props.WasteQuantity}</td>\n                </tr>\n              </tbody>\n            </Table>\n          </Card.Text>\n          <div>\n            <hr></hr>\n          </div>\n          <CheckStatus />\n          <Button variant=\"light\" className={VDstyles.vendor_invoice_button}>\n            VIEW INVOICE\n          </Button>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  function StatusUpdates(props) {\n    return (\n      <div className=\"status-updates\">\n        <FcOk className=\"tick-icon\" />\n        <p>{props.status}</p>\n      </div>\n    );\n  }\n\n  function CheckStatus() {\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n      <>\n        <Button\n          variant=\"warning\"\n          className={VDstyles.vendor_update_button}\n          onClick={handleShow}\n        >\n          CHECK STATUS\n        </Button>\n\n        <Modal show={show} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>STATUS UPDATE</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <form>\n              <StatusUpdates status=\"Approved by rider\" />\n              <StatusUpdates status=\"Rider on way\" />\n              <StatusUpdates status=\"Waste collected\" />\n              <StatusUpdates status=\"Paid to seller\" />\n              <StatusUpdates status=\"Dropped at vendor\" />{\" \"}\n            </form>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={handleClose}>\n              Save Changes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n  return (\n    <div className={VDstyles.vendor_dashboard}>\n      <div className={VDstyles.greet_vendor}>\n        {\" \"}\n        <Link to=\"/profile/vendor\">\n          {/* GRADIENT BAR */}\n          <div className=\"vendor-image\">\n            <img\n              src={user ? user.avatar : vendorpic}\n              alt=\"profile_img\"\n              className={VDstyles.vendor_img}\n            ></img>{\" \"}\n            {/* VENDOR IMAGE */}\n          </div>\n          <div className={VDstyles.greeting_vendor}>\n            <h2>Welcome, {user ? user.name : \"\"}</h2> {/* GREET VENDOR */}\n          </div>\n        </Link>\n      </div>\n\n      <div className=\"card-groups\">\n        {\" \"}\n        {/* CONTAINS ALLOTTED AND PENDING CARDS*/}\n        <div class=\"row\">\n          <div class=\"col-12 col-lg-6\">\n            <div className=\"upcoming\">\n              <div className={VDstyles.vendor_heading}>\n                <h1>UPCOMING ORDERS</h1>\n              </div>\n              {request.length > 0 ? (\n                request.map((requests) => {\n                  if (!requests.cancelled) {\n                    return (\n                      <Card classname={VDstyles.card_orders}>\n                        <Card.Body className={VDstyles.card_u}>\n                          <Card.Text>\n                            <Table>\n                              <tbody>\n                                <tr>\n                                  <td>ORDER NO.</td>\n                                  <td>{requests._id}</td>\n                                </tr>\n                                <tr>\n                                  <td>SELLER'S NAME</td>\n                                  <td>{requests.seller.name}</td>\n                                </tr>\n                                <tr>\n                                  <td>RIDER'S NAME</td>\n                                  <td>\n                                    {requests.riderDetail\n                                      ? requests.riderDetail.name\n                                      : \"Rider Not Alloted\"}\n                                  </td>\n                                </tr>\n                                <tr>\n                                  <td>SLOT</td>\n                                  <td>\n                                    {<Moment>{requests.timeOfPickup}</Moment>}\n                                  </td>\n                                </tr>\n                                <tr>\n                                  <td>WASTE TYPE</td>\n                                  <td>\n                                    {requests.orderList.map(\n                                      (waste) => waste.nameOfWaste\n                                    )}\n                                  </td>\n                                </tr>\n                                <tr>\n                                  <td>WASTE QUANTITY</td>\n                                  <td>\n                                    {requests.orderList.map(\n                                      (waste) => waste.qty\n                                    )}\n                                  </td>\n                                </tr>\n                              </tbody>\n                            </Table>\n                          </Card.Text>\n                          <div>\n                            <hr></hr>\n                          </div>\n                          <Button\n                            variant=\"success\"\n                            className={VDstyles.vendor_accept}\n                            onClick={() => acceptOrder(requests._id)}\n                          >\n                            ACCEPT\n                          </Button>\n                          <Button\n                            variant=\"danger\"\n                            className={VDstyles.vendor_decline}\n                          >\n                            DECLINE\n                          </Button>\n                        </Card.Body>\n                      </Card>\n                    );\n                  }\n                })\n              ) : (\n                <h3>No Upcoming Request!</h3>\n              )}\n            </div>\n          </div>\n\n          {acceptedRequest.length > 0 ? (\n            <div class=\"col-12 col-lg-6\">\n              <div className=\"accepted\">\n                <div className={VDstyles.vendor_heading}>\n                  <h1>ACCEPTED ORDERS</h1>\n                </div>\n                {acceptedRequest.map((request) => {\n                  return (\n                    <AcceptedCard\n                      OrderNo={request._id}\n                      SellerName={request.seller.name}\n                      RiderName={\n                        request.riderDetail\n                          ? request.riderDetail.name\n                          : \"Rider Not Alloted\"\n                      }\n                      Slot={<Moment>{request.timeOfPickup}</Moment>}\n                      WasteType={request.orderList.map(\n                        (waste) => waste.nameOfWaste\n                      )}\n                      WasteQuantity={request.orderList.map(\n                        (waste) => waste.qty\n                      )}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n\n      <div className={VDstyles.vendor_order_hist_button}>\n        <Link to=\"/history/order\">\n          <Button variant=\"info\">ORDER HISTORY</Button>\n        </Link>\n      </div>\n    </div>\n  );\n};\nVendorDashboard.propTypes = {\n  user: PropTypes.object.isRequired,\n  vendor: PropTypes.object.isRequired,\n  pickup: PropTypes.object.isRequired,\n  acceptOrder: PropTypes.func.isRequired,\n  alert: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.auth.user,\n  vendor: state.pickup.vendor,\n  pickup: state.pickup,\n  alert: state.alert,\n});\n\nexport default connect(mapStateToProps, { vendorOrderList, acceptOrder })(\n  VendorDashboard\n);\n","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\SellerProfile\\SellerProfile.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Faqs\\Faqs.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Seller_PickupHistory\\pickup_history.js",["221"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PHstyles from \"./pickup_history.module.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport seller_ic from \"./seller.jpg\";\nimport { connect } from \"react-redux\";\nimport Moment from \"react-moment\";\n\nconst PickupHistory = ({ requests, user }) => {\n  function PickupDetails(props) {\n    return (\n      <tr>\n        <td>{props.OrderNo}</td>\n        <td>{props.Slot}</td>\n        <td>{props.VendorName}</td>\n        <td>{props.Review}</td>\n        <td>{props.Status}</td>\n        <td className={PHstyles.invoice}>{props.Invoice}</td>\n      </tr>\n    );\n  }\n\n  return (\n    <div className={PHstyles.parent_container}>\n      <div>\n        <div className={PHstyles.greet_seller}>\n          {/* GRADIENT BAR */}\n          <div className=\"seller-image\">\n            <img\n              src={user ? user.avatar : seller_ic}\n              alt=\"profile_img\"\n              className={PHstyles.seller_img}\n            ></img>\n            {/* SELLER IMAGE */}\n          </div>\n          <div className={PHstyles.seller_greeting_text}>\n            <h2>{user ? user.name : \"\"}</h2>\n            {/* GREET SELLER */}\n          </div>\n        </div>\n\n        <div className={PHstyles.seller_pickup_history}>\n          <div className={PHstyles.list_heading}>\n            <h2>PICKUP HISTORY</h2>\n          </div>\n\n          <div className={PHstyles.bgeffect}>\n            <Table striped bordered hover responsive=\"md\">\n              <thead>\n                <tr>\n                  <th>ORDER NO.</th>\n                  <th>SLOT</th>\n                  <th>VENDOR NAME</th>\n                  <th>REVIEW</th>\n                  <th>Status</th>\n                  <th>INVOICE</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {requests.map((request) => {\n                  if (request.cancelled || request.completed) {\n                    return (\n                      <PickupDetails\n                        OrderNo={request._id}\n                        Slot={<Moment>{request.timeOfPickup}</Moment>}\n                        VendorName={request.vendorDetail.name}\n                        Review={\"Good\"}\n                        Status={request.cancelled ? \"Cancelled\" : \"Completed\"}\n                        Invoice={\"1234Amy.pdf\"}\n                      />\n                    );\n                  }\n                })}\n                {/* <PickupDetails\n                  OrderNo=\"#1234\"\n                  Slot=\"16/01/2021 19:00\"\n                  VendorName=\"ABC Recyclers\"\n                  Review=\"Good\"\n                  Invoice=\"1234Amy.pdf\"\n                />\n\n                <PickupDetails\n                  OrderNo=\"#5678\"\n                  Slot=\"17/01/2021 09:00\"\n                  VendorName=\"DEF Recyclers\"\n                  Review=\"Excellent\"\n                  Invoice=\"5678Jake.pdf\"\n                />\n\n                <PickupDetails\n                  OrderNo=\"#1357\"\n                  Slot=\"17/01/2021 16:00\"\n                  VendorName=\"GHJ Recyclers\"\n                  Review=\"Could be better\"\n                  Invoice=\"1357Charles.pdf\"\n                /> */}\n              </tbody>\n            </Table>\n          </div>\n\n          <div className={PHstyles.return_btn}>\n            <Link to=\"/dashboard/seller\">\n              <Button variant=\"primary\">RETURN TO DASHBOARD</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  requests: state.pickup.request,\n  user: state.auth.user,\n});\n\nexport default connect(mapStateToProps, {})(PickupHistory);\n","D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Vendor_OrderHistory\\order_history.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\VendorProfile\\VendorProfile.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\TnC\\TnC.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\ContactUs\\ContactComponent.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\SellerProfile\\Card.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Testimonials\\Testimonials.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\Workflow\\Workflow.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\actions\\alert.js",["222"],"// import uuid from 'uuid'\nimport { SET_ALERT, REMOVE_ALERT, ERROR } from \"./types\";\n\nexport const setAlert = (msg, alertType, timeout = 5000) => (dispatch) => {\n  const id = Math.ceil(Math.random() * 10000);\n  dispatch({\n    type: SET_ALERT,\n    payload: { msg, alertType, id },\n  });\n\n  setTimeout(() => dispatch({ type: REMOVE_ALERT, payload: id }), timeout);\n};\n","D:\\KTERN.AI\\PRECycle-main\\client\\src\\actions\\types.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\SellerProfile\\EditAddress.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\FactsFigures\\FactsFigures.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\components\\layout\\Spinner.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\reducers\\index.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\reducers\\alert.js",[],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\reducers\\pickup.js",[],["223","224"],"D:\\KTERN.AI\\PRECycle-main\\client\\src\\reducers\\auth.js",[],{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","severity":1,"message":"230","line":30,"column":25,"nodeType":"231","messageId":"232","endLine":30,"endColumn":36},{"ruleId":"233","severity":1,"message":"234","line":122,"column":32,"nodeType":"235","messageId":"236","endLine":122,"endColumn":34},{"ruleId":"233","severity":1,"message":"234","line":126,"column":32,"nodeType":"235","messageId":"236","endLine":126,"endColumn":34},{"ruleId":"229","severity":1,"message":"237","line":4,"column":10,"nodeType":"231","messageId":"232","endLine":4,"endColumn":17},{"ruleId":"229","severity":1,"message":"238","line":5,"column":8,"nodeType":"231","messageId":"232","endLine":5,"endColumn":17},{"ruleId":"229","severity":1,"message":"239","line":3,"column":10,"nodeType":"231","messageId":"232","endLine":3,"endColumn":18},{"ruleId":"240","severity":1,"message":"241","line":31,"column":6,"nodeType":"242","endLine":31,"endColumn":16,"suggestions":"243"},{"ruleId":"244","severity":1,"message":"245","line":140,"column":3,"nodeType":"246","messageId":"247","endLine":140,"endColumn":11},{"ruleId":"229","severity":1,"message":"248","line":3,"column":10,"nodeType":"231","messageId":"232","endLine":3,"endColumn":28},{"ruleId":"229","severity":1,"message":"249","line":12,"column":10,"nodeType":"231","messageId":"232","endLine":12,"endColumn":18},{"ruleId":"229","severity":1,"message":"239","line":13,"column":10,"nodeType":"231","messageId":"232","endLine":13,"endColumn":18},{"ruleId":"229","severity":1,"message":"250","line":16,"column":3,"nodeType":"231","messageId":"232","endLine":16,"endColumn":14},{"ruleId":"240","severity":1,"message":"251","line":34,"column":6,"nodeType":"242","endLine":34,"endColumn":28,"suggestions":"252"},{"ruleId":"229","severity":1,"message":"253","line":9,"column":29,"nodeType":"231","messageId":"232","endLine":9,"endColumn":44},{"ruleId":"229","severity":1,"message":"254","line":12,"column":10,"nodeType":"231","messageId":"232","endLine":12,"endColumn":18},{"ruleId":"240","severity":1,"message":"255","line":33,"column":6,"nodeType":"242","endLine":33,"endColumn":15,"suggestions":"256"},{"ruleId":"229","severity":1,"message":"257","line":57,"column":5,"nodeType":"231","messageId":"232","endLine":57,"endColumn":14},{"ruleId":"229","severity":1,"message":"258","line":1,"column":17,"nodeType":"231","messageId":"232","endLine":1,"endColumn":26},{"ruleId":"233","severity":1,"message":"234","line":29,"column":28,"nodeType":"235","messageId":"236","endLine":29,"endColumn":30},{"ruleId":"229","severity":1,"message":"259","line":57,"column":48,"nodeType":"231","messageId":"232","endLine":57,"endColumn":57},{"ruleId":"233","severity":1,"message":"260","line":72,"column":28,"nodeType":"235","messageId":"261","endLine":72,"endColumn":30},{"ruleId":"240","severity":1,"message":"262","line":47,"column":6,"nodeType":"242","endLine":47,"endColumn":17,"suggestions":"263"},{"ruleId":"240","severity":1,"message":"264","line":21,"column":6,"nodeType":"242","endLine":21,"endColumn":12,"suggestions":"265"},{"ruleId":"240","severity":1,"message":"266","line":24,"column":6,"nodeType":"242","endLine":24,"endColumn":13,"suggestions":"267"},{"ruleId":"229","severity":1,"message":"268","line":25,"column":12,"nodeType":"231","messageId":"232","endLine":25,"endColumn":24},{"ruleId":"233","severity":1,"message":"260","line":197,"column":40,"nodeType":"235","messageId":"261","endLine":197,"endColumn":42},{"ruleId":"233","severity":1,"message":"260","line":62,"column":41,"nodeType":"235","messageId":"261","endLine":62,"endColumn":43},{"ruleId":"229","severity":1,"message":"269","line":2,"column":35,"nodeType":"231","messageId":"232","endLine":2,"endColumn":40},{"ruleId":"225","replacedBy":"270"},{"ruleId":"227","replacedBy":"271"},"no-native-reassign",["272"],"no-negated-in-lhs",["273"],"no-unused-vars","'viewRequest' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'connect' is defined but never used.","'PropTypes' is defined but never used.","'setAlert' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'login', 'loginDetail', and 'typeOfUser'. Either include them or remove the dependency array. If 'login' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["274"],"no-dupe-keys","Duplicate key 'setAlert'.","ObjectExpression","unexpected","'AiFillGoogleCircle' is defined but never used.","'Redirect' is defined but never used.","'acceptOrder' is defined but never used.","React Hook useEffect has missing dependencies: 'viewAcceptedRequestRider' and 'viewRequest'. Either include them or remove the dependency array. If 'viewRequest' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["275"],"'vendorOrderList' is defined but never used.","'loadUser' is defined but never used.","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.",["276"],"'wasteType' is assigned a value but never used.","'useEffect' is defined but never used.","'cancelled' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has a missing dependency: 'wasteTypeArray'. Either include it or remove the dependency array.",["277"],"React Hook useEffect has a missing dependency: 'loadNearbyVendors'. Either include it or remove the dependency array. If 'loadNearbyVendors' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["278"],"React Hook useEffect has a missing dependency: 'vendorOrderList'. Either include it or remove the dependency array. If 'vendorOrderList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["279"],"'UpcomingCard' is defined but never used.","'ERROR' is defined but never used.",["272"],["273"],"no-global-assign","no-unsafe-negation",{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},"Update the dependencies array to be: [login, loginDetail, password, typeOfUser]",{"range":"292","text":"293"},"Update the dependencies array to be: [auth.isAuthenticated, viewAcceptedRequestRider, viewRequest]",{"range":"294","text":"295"},"Update the dependencies array to be: [formData, vendors]",{"range":"296","text":"297"},"Update the dependencies array to be: [auth.user, wasteTypeArray]",{"range":"298","text":"299"},"Update the dependencies array to be: [loadNearbyVendors, user]",{"range":"300","text":"301"},"Update the dependencies array to be: [alert, vendorOrderList]",{"range":"302","text":"303"},[928,938],"[login, loginDetail, password, typeOfUser]",[929,951],"[auth.isAuthenticated, viewAcceptedRequestRider, viewRequest]",[1088,1097],"[formData, vendors]",[1366,1377],"[auth.user, wasteTypeArray]",[609,615],"[loadNearbyVendors, user]",[760,767],"[alert, vendorOrderList]"]